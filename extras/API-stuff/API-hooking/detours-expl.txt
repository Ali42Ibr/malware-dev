MessageBoxA example.

Debugged using x64DBG

Before hooking: 

Start of MessageBoxA function:

00007FFFC40F26A0 sub rsp,38
00007FFFC40F26A4 xor r11d,r11d

First 7 bytes contain these two instructions, followed by the rest of user32!MessageBoxA

After hooking:

The hooking dll hooks the function as follows: it requires 5 bytes in order to put a jump instructions
at the top of the function. But since it would break the second instruction (xor), it opts to only using 
the first 5 and replaces the rest with ints:

00007FFFC40F26A0 jmp 7FFF840E0178
00007FFFC40F26A5 int3
00007FFFC40F26A6 int3

This is how the function now looks in the module whenever any function or code calls it within the PE.

Lets see how the execution goes after the first jmp instruction.

00007FFF840E0178 jmp qword ptr ds:[7FFF840E0170]
00007FFF840E017E int3
00007FFF840E017F int3

My assumption as of now: This new jump instruction jumps to the address contained in 7FFF840E0170.
This should be the "detour" function, where we will execute the new code. 

Detour function:

//Save the old call's parameters
00007FFFB4031010 mov dword ptr ss:[rsp+20],r9d              |
00007FFFB4031015 mov qword ptr ss:[rsp+18],r8               |
00007FFFB403101A mov qword ptr ss:[rsp+10],rdx              |
00007FFFB403101F mov qword ptr ss:[rsp+8],rcx               |
//Init stack and replace the parameters 1 to 1
00007FFFB4031024 sub rsp,28                                 |
00007FFFB4031028 mov r9d,dword ptr ss:[rsp+48]              | (uType)
00007FFFB403102D mov r8,qword ptr ss:[rsp+40]               | (lpCaption)
00007FFFB4031032 lea rdx,qword ptr ds:[7FFFB4046340]        | 00007FFFB4046340:"New messagebox text" (lpText)
00007FFFB4031039 mov rcx,qword ptr ss:[rsp+30]              | [rsp+30]:sub_7FFFC40F1AD8+127 (handle)
//Call the trampoline function
00007FFFB403103E call qword ptr ds:[7FFFB4051AF8]           |

The trampoline function in this case has a very simple job, it is a intermidiate function between the original one (albiet 
hooked and massacared) and the detour function which changes functionality.

Trampoline function:

00007FFF840E0120 sub rsp,38
00007FFF840E0124 xor r11d,r11d
00007FFF840E0127 jmp qword ptr ds:[7FFF840E0168]

Notice that the first two instructions are identical to the ones removed by the hooking dll.
The third instruction actually leads to the address 00007FFFC40F26A7. Which is right after the three replaced instructions,
which means the messagebox function has been essentially patched up after the redirected input!

Please notice that this whole run around only happens when we want to use a hooked function, like when redirecting 
or changing parameters. If we are simply going to execute a different function or code, we skip over this 
whole function entirely.

The detour function stays the same, it saves the parameters and executes some new code, but then we just return to the 
caller of MessageBoxA and continue running. Without ever using the trampoline function or returning to the real code of 
MessageBoxA.
