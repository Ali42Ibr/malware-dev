// using PAGE_GUARD exception functionality as a psuedo hook

#include <stdio.h>
#include <windows.h>

#pragma comment (lib, "User32.lib")

// parameters are passed manually
int hookedMsg(HWND rcx,LPCSTR rdx,LPCSTR r8, UINT r9, DWORD stck1, DWORD stck2){
	
	MessageBoxA( rcx, "new text", r8, r9);
	
	return NULL;
}


//exception function
LONG WINAPI vectorHandler(struct _EXCEPTION_POINTERS *ExceptionInfo){
	
	CONTEXT * ctx = ExceptionInfo->ContextRecord;
	
	if (ExceptionInfo->ExceptionRecord->ExceptionCode == STATUS_GUARD_PAGE_VIOLATION ){
		
		ExceptionInfo->ContextRecord->Rip = (DWORD64) &hookedMsg;
		
		return EXCEPTION_CONTINUE_EXECUTION;
	}
	
    return EXCEPTION_CONTINUE_SEARCH;
}


int main() {

	DWORD old;
	// notifying winAPI of exception function
	HANDLE hVector = AddVectoredExceptionHandler( 1, &vectorHandler);
	
	// changing permission to guard
	VirtualProtectEx( GetCurrentProcess(), &MessageBoxA, 1, PAGE_EXECUTE_READ | PAGE_GUARD, &old);

	//using the function
	MessageBoxA( NULL, "lpText", "lpCaption", MB_OK);
	
	RemoveVectoredExceptionHandler(hVector);

	return 0;

}
