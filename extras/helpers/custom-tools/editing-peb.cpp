// modifying PEB of module in order to masquerade as another process

// Modified inside PEB.ProcessParameters: CurrentDirectory, ImagePathName, CommandLine

// in this example the current module will masquerade as notepad

#include <windows.h>
#include <stdio.h>
#include "x.h"

#define DIR L"C:\\Windows\\System32"
#define IMAGE_NAME L"C:\\Windows\\System32\\notepad.exe"
#define COMMAND_LINE IMAGE_NAME

int main(){

	PEB * peb;
	
	//finding PEB address
	#if defined(_M_X64) // x64
	peb = (PEB *) __readgsqword(0x60);
	#else // x86
	peb = (PEB *) __readfsdword(0x60);
	#endif
	
	RTL_USER_PROCESS_PARAMETERS * param = peb->ProcessParameters;
	
	printf("enter to edit peb\n");
	getchar();
	
	//current directory
	if (2*wcslen(DIR) > param->CurrentDirectory.DosPath.MaximumLength){
		printf("Fake dir too big\n");
		return 1;
	}
	param->CurrentDirectory.DosPath.Buffer = DIR;
	
	//image path name
	if (2*wcslen(IMAGE_NAME) > param->ImagePathName.MaximumLength){
		printf("%d %d\n", (int)(2*wcslen(IMAGE_NAME)),  (int)param->ImagePathName.MaximumLength);
		printf("Image name too big\n");
		return 1;
	}
	param->ImagePathName.Buffer = IMAGE_NAME;

	//command line
	if (2*wcslen(COMMAND_LINE) > param->CommandLine.MaximumLength){
		printf("%d %d\n", (int)(2*wcslen(COMMAND_LINE)),  (int)param->CommandLine.MaximumLength);
		printf("Cmd too big\n");
		return 1;
	}
	param->CommandLine.Buffer = COMMAND_LINE;	
	printf("%S\n", param->CommandLine.Buffer);
	getchar();
	
	return 0;
}
