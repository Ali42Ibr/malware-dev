//alternate file streams
//In NTFS each file contains "streams", which convey different properties about certain portions of the file
//and when they are to be viewed.
//The default stream can be viewed with dir, but other hidden streams are more compilcated to view.

//check if filesystem is ntfs
 
// write data into ADS

// list streams

// read data from streams

#include <stdio.h>
#include <windows.h>

int writeStream(char fullName[], char data[], size_t data_len) {
	
	char volumeType[100] = {0};
	DWORD dwRet;
	
	if(!GetVolumeInformationA( NULL, NULL, NULL, NULL, NULL, NULL, volumeType, 100)){
		printf("Unable to get volume type: %X\n", GetLastError());
		return 1;
	}
	
	if (strcmp("NTFS", volumeType)){
		printf("Unable to view/create ADS, file system is not NTFS\n");
		return 1;
	}
	
	HANDLE hFile = CreateFile( fullName, GENERIC_READ | GENERIC_WRITE, NULL, NULL, OPEN_ALWAYS, 0, NULL );  
	if ( hFile == INVALID_HANDLE_VALUE ){
		printf( "Cannot open test:stream\n" );
		return 1;
	}
	
	WriteFile( hFile, data, data_len, &dwRet ,NULL );  
	
	CloseHandle( hFile );

	return 0;
	
}

int listStream(){	
	
	WIN32_FIND_DATA ffd;
	WIN32_FIND_STREAM_DATA fsd;
	size_t newsize;
	wchar_t * nameForStream;
	
	HANDLE hFind = FindFirstFileA( ".\\*",  &ffd);
	
	printf("\n");
	do {
		if (ffd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
			printf("\t<DIR> \t%s\n", ffd.cFileName);
		else {
			printf("\t<FILE>\t%s\n", ffd.cFileName);
			//check for $DATA streams
			newsize = strlen(ffd.cFileName) + 1;
			nameForStream = new wchar_t[newsize];
			mbstowcs_s(NULL, nameForStream, newsize, ffd.cFileName, _TRUNCATE);
			HANDLE hStream =  FindFirstStreamW( nameForStream, (STREAM_INFO_LEVELS) 0, &fsd, 0);
			do {
				printf("\t<STREAM>\t%s%S\n", ffd.cFileName, fsd.cStreamName);
			}while (FindNextStreamW( hStream, &fsd));
		}
	} while(FindNextFileA( hFind, &ffd) != 0);
	
	return 1;
}

int readStream(char fullName[]){
	
	
	char data[100000];
	size_t data_len = sizeof(data);
	char volumeType[100] = {0};
	DWORD dwRet;
	
	if(!GetVolumeInformationA( NULL, NULL, NULL, NULL, NULL, NULL, volumeType, 100)){
		printf("Unable to get volume type: %X\n", GetLastError());
		return 1;
	}
	
	if (strcmp("NTFS", volumeType)){
		printf("File system is not NTFS, no ADS to read here..\n");
		return 1;
	}
	
	HANDLE hFile = CreateFile( fullName, GENERIC_READ, NULL, NULL, OPEN_EXISTING, 0, NULL );  
	if ( hFile == INVALID_HANDLE_VALUE ){
		printf( "Cannot open %s\n", fullName);
		return 1;
	}
	
	ReadFile(hFile, data, data_len, &dwRet, NULL );  
	
	printf("Number of bytes: %d\n", dwRet);
	printf("Data: %s", data);
	
	CloseHandle( hFile );
}


int main(int argc, char * argv[]) {
	
	if (argc < 2) {
		printf("[!] Incorrect arguments. \nOptions \n -w <stream name to write to> <data to write> \n -l lists all streams in current directory \n -r <stream name to read from>");
		return 1;
	}
	
	if (!strcmp(argv[1], "-w")) {
		if (argc < 4) {
			printf("[!] Missing arguments. Run: %s %s <stream name to write to> <data to write>\n", argv[0], argv[1]);
			return 1;
		}
		writeStream(argv[2], argv[3], strlen(argv[3]));
	} else if (!strcmp(argv[1],"-l")) listStream();
	else if (!strcmp(argv[1],"-r")) {
		if (argc < 3) {
			printf("[!] Missing arguments. Run: %s %s <stream name to read from>\n", argv[0], argv[1]);
			return 1;
		}
		readStream(argv[2]);
	} else {
		printf("[!] Incorrect arguments. \nOptions \n -w <stream name to write to> <data to write> \n -l lists all streams in current directory \n -r <stream name to read from>");
		return 1;
	}		
	return 0;
	
}