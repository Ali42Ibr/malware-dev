/*

 API hooking techniques are used in a variety of malware, anti-virus, and a variety of other applications. 
 These techniques involve controlling or redirecting function behaviour such as that the code execution is 
 completely different than what it should be. 
 
 API hooking is ued in EDRs by checking the parameters and usage of specific potentially dangerous function.
 But fortunately, since these EDRs are in user-space we have just as much control over these functions as they do.
 So by simply redirecting the EDRs redirection, we can revert its control and bypass it. This is just one of the 
 many scenarios where API hooking is useful.

 This method utilizes the detours library: https://github.com/microsoft/Detours. Definitely the best way to do this
 as it is more robust, stable, and has more functionality. Need to download the detours library to use it. Also more 
 likely to be detected. 

 Look into the detours library for explanations on the specific functions. Look at detours-expl.txt for a overview on what it does.

 Compile as dll and attatch/inject into victim process.

*/

#include <stdio.h>
#include <windows.h>
#include "detours.h"
#pragma comment(lib, "user32.lib")

int (WINAPI * pMessageBox)(HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, UINT uType) = MessageBox;

// function to replace hooked function
int hookedMessageBox(HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, UINT uType) {
	
	//pMessageBox(hWnd, "NO MSGBOX FOR U", lpCaption, uType);
	
	printf("Hello");
	
	return 0;
	
}

int Hook(){
		
    //hooking as described in the detours documentation
    DetourTransactionBegin();
    DetourUpdateThread(GetCurrentThread());
    DetourAttach(&(PVOID&)pMessageBox, hookedMessageBox);
    DetourTransactionCommit();
	
	printf("OG messagebox: %p\n", pMessageBox);
	printf("New messagebox: %p\n", MessageBox);
	getchar();
	
	return 0;

}

int unHook(){
	
    //unhooking as described in the detours documentation
    DetourTransactionBegin();
    DetourUpdateThread(GetCurrentThread());
    DetourDetach(&(PVOID&)pMessageBox, hookedMessageBox);
    DetourTransactionCommit();	

	return 0;

}

BOOL APIENTRY DllMain( HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved ){

	switch (ul_reason_for_call){
	case DLL_PROCESS_ATTACH:
		printf("Hook attatched\n");
		Hook();
		break;
	case DLL_THREAD_ATTACH:
		break;
	case DLL_THREAD_DETACH:
		break;
	case DLL_PROCESS_DETACH:
		printf("Hook detatched\n");
		unHook();
		break;
	}
	return TRUE;
}
